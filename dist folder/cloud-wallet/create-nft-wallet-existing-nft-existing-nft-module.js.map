{"version":3,"sources":["./src/app/dashboard/create-nft-wallet/existing-nft/existing-nft.module.ts","./src/app/dashboard/create-nft-wallet/existing-nft/existing-nft-routing.module.ts","./src/app/dashboard/create-nft-wallet/existing-nft/existing-nft.component.ts","./src/app/dashboard/create-nft-wallet/existing-nft/existing-nft.component.html"],"names":[],"mappings":"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","file":"create-nft-wallet-existing-nft-existing-nft-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n//import { BrowserModule } from '@angular/platform-browser'\r\n\r\nimport { ExistingNftRoutingModule } from './existing-nft-routing.module';\r\nimport { ExistingNftComponent } from './existing-nft.component'\r\nimport { LottieModule } from 'ngx-lottie';\r\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\n@NgModule({\r\n    declarations: [ExistingNftComponent],\r\n    imports: [\r\n        CommonModule,\r\n        //BrowserModule,\r\n        ExistingNftRoutingModule,\r\n        LottieModule,\r\n        ReactiveFormsModule, FormsModule\r\n    ]\r\n})\r\nexport class ExistingNftModule { }","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n//import { BrowserModule } from '@angular/platform-browser'\r\nimport {ExistingNftComponent } from './existing-nft.component'\r\nimport { CommonModule } from '@angular/common';\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ExistingNftComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes),\r\n        //BrowserModule,\r\n        CommonModule\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class ExistingNftRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { EventService } from 'src/app/services/event.service';\r\nimport Swal from 'sweetalert2';\r\nimport { AnimationOptions } from 'ngx-lottie';\r\nimport { AnimationItem } from 'lottie-web';\r\n\r\n@Component({\r\n  selector: 'app-existing-nft',\r\n  templateUrl: './existing-nft.component.html',\r\n  styleUrls: ['./existing-nft.component.scss'],\r\n  host: {\r\n    '(document:click)': 'onClick($event)',\r\n  },\r\n})\r\nexport class ExistingNftComponent implements OnInit {\r\n  title_name: string;\r\n  domain_name: any;\r\n  sn_detail: any;\r\n  nftForm: FormGroup;\r\n  public cSelectorImg: string;\r\n  public cSelectorText: string;\r\n  public cSelectorText1: string;\r\n  public destName: string;\r\n  public nftName: string;\r\n  public userLocal: any;\r\n  public all: any;\r\n  public customSelectorOpen: boolean;\r\n  public customSelectorOpen1: boolean = false;\r\n  public walletselected: boolean = false;\r\n  public nftnumber: number;\r\n  public data: any;\r\n  public title: string[] = [];\r\n  public path2: string;\r\n  file: string;\r\n  payload: any;\r\n  showLoader = false;\r\n  loadingMessage: string = '';\r\n  options: AnimationOptions = {\r\n    path: 'https://raida11.cloudcoin.global/animation/cloud_loading.json',\r\n  };\r\n\r\n  constructor(private fb: FormBuilder,\r\n    private storage: EventService,\r\n    private api: ApiService,\r\n    private router: Router,\r\n    private actRoute: ActivatedRoute,) {\r\n    this.cSelectorText = 'Select a wallet';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.nftForm = new FormGroup({\r\n      //'title': new FormControl('', [Validators.required, Validators.pattern('[a-zA-z0-9-]*')]),\r\n      'nftnumber': new FormControl(1, [Validators.required, Validators.min(1)]),\r\n    });\r\n    this.getAllwallet();\r\n    // this.getNfts();\r\n    this.actRoute.queryParams.subscribe(params => {\r\n      this.title_name = params['title_name'];\r\n      this.domain_name = params['domain_name'];\r\n      this.sn_detail = params['snvalue']\r\n    });\r\n    console.log(\"from Mint page:\" + this.domain_name)\r\n    console.log(\"from mint page:\" + this.sn_detail)\r\n  }\r\n\r\n  async onSubmit(form: FormGroup) {\r\n    console.log(this.nftForm)\r\n    this.exportNft()\r\n  }\r\n\r\n  async balancecheck() {\r\n    this.nftnumber = this.nftForm.get('nftnumber').value;\r\n    let response: any = await this.api.getTransaction(this.destName);\r\n    if (response.payload.balance < this.nftnumber) {\r\n      Swal.fire({\r\n        title: 'You cannot make this number of NFTs because selected wallet balance is ' + response.payload.balance + 'cc',\r\n        icon: 'info',\r\n        confirmButtonText: 'Okay'\r\n      })\r\n    }\r\n  }\r\n\r\n  async getAllwallet() {\r\n    try {\r\n      let response: any;\r\n      response = await this.api.getWallet();\r\n      if (response.status == 'success') {\r\n        this.all = response.payload;\r\n        console.log(\"this.all\" + this.all)\r\n        this.cSelectorImg = 'assets/folder-w-border.svg';\r\n        if (this.all.length == 1) {\r\n          this.cSelectorText = this.all[0].name;\r\n          this.customSelectorOpen = false;\r\n          this.walletselected = true;\r\n          this.destName = this.all[0].name\r\n        }\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async customSelector(val: string) {\r\n    this.destName = val;\r\n    this.cSelectorImg = 'assets/folder-w-border.svg';\r\n    this.cSelectorText = val;\r\n    this.customSelectorOpen = false;\r\n    console.log(\"val \" + this.destName)\r\n    if (this.destName != 'Search wallets') {\r\n      this.walletselected = true;\r\n    }\r\n    console.log(\"wallet selected:\" + this.walletselected)\r\n    let response: any = await this.api.getTransaction(this.destName);\r\n    if (response.payload.balance == 0) {\r\n      Swal.fire({\r\n        title: 'You cannot make NFTs because your wallet is empty.',\r\n        icon: 'info',\r\n        confirmButtonText: 'Okay'\r\n      });\r\n    }\r\n\r\n  }\r\n  customSelToggler() {\r\n    this.customSelectorOpen = !this.customSelectorOpen;\r\n  }\r\n\r\n\r\n\r\n  async customSelToggler1() {\r\n    // this.customSelectorOpen1 = !this.customSelectorOpen1;\r\n\r\n    try {\r\n      let response: any = await this.api.nftGroups();\r\n      if (response.status === \"success\") {\r\n        this.data = response.payload;\r\n        console.log(this.data);\r\n        for (let i = 0; i < this.data.length; i++) {\r\n\r\n          this.title[i] = this.data[i].title\r\n        }\r\n        this.customSelectorOpen1 = true;\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n\r\n  }\r\n\r\n  onClick() {\r\n    this.customSelectorOpen1 = false;\r\n  }\r\n\r\n  customSelector1(val: string) {\r\n    this.nftName = val;\r\n    console.log(\"name:\" + this.nftName)\r\n    this.cSelectorText1 = val;\r\n    this.customSelectorOpen1 = false;\r\n  }\r\n\r\n  async exportNft() {\r\n    try {\r\n      var data = {\r\n        name: this.destName,\r\n        amount: Number(this.nftForm.get('nftnumber').value),\r\n        template_path: \"\",\r\n        domain_name: this.domain_name,\r\n        host_name: this.title_name,\r\n\r\n        text_color: '#000000',\r\n        x: 10,\r\n        y: 10,\r\n        is_vertical: true,\r\n        font_size: 16,\r\n        description: '',\r\n        is_transparent: true,\r\n        write_sn: false,\r\n        personal_text: ''\r\n      }\r\n      let response: any = await this.api.exportCoinasNft(data);\r\n      console.log(data);\r\n      this.showLoader = true;\r\n      this.loadingMessage = \"Creating NFT...\"\r\n      if (response.status === \"success\") {\r\n        this.doCheck1(response.payload?.id, (data: any) => {\r\n        });\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async doCheck1(taskID: any, xdata: any) {\r\n    let task: any = await this.api.doCheck(taskID);\r\n    if (task) {\r\n      this.payload = task.payload;\r\n      if (this.payload.status == \"error\" || this.payload.status == \"completed\") {\r\n        if (this.payload.status == \"completed\") {\r\n          console.log(\"process completed\")\r\n          this.showLoader = false;\r\n          Swal.fire({\r\n            title: 'NFT has been created successfully',\r\n            icon: 'success',\r\n            confirmButtonText: 'Okay'\r\n          })\r\n          this.router.navigate(['/dashboard/create-nft-gallery']);\r\n        } else {\r\n          this.showLoader = false;\r\n          Swal.fire({\r\n            title: 'Failed to create NFT',\r\n            icon: 'error',\r\n            confirmButtonText: 'Okay'\r\n          })\r\n          this.router.navigate(['/dashboard/create-nft']);\r\n          setTimeout(() => {\r\n           window.location.reload();\r\n          }, 3000)\r\n        }\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        this.doCheck1(taskID, xdata)\r\n      }, 500)\r\n    }\r\n  }\r\n\r\n  showLoading(state): void {\r\n    this.loadingMessage = '';\r\n    if (state) {\r\n\r\n      this.showLoader = true;\r\n\r\n    } else {\r\n\r\n      this.showLoader = false;\r\n\r\n    }\r\n\r\n  }\r\n\r\n  animationCreated(animationItem: AnimationItem): void {\r\n    console.log(animationItem);\r\n  }\r\n\r\n}\r\n\r\n","<div class=\"gap30\"></div>\r\n<div class=\"transWrapper\">\r\n    <div class=\"headerbackWrap\">\r\n        <a href=\"javascript:;\" routerLink=\"/dashboard/create-nft-gallery\" class=\"backBtnInHeader\"><img\r\n                src=\"assets/arrow.svg\" alt=\"\"></a>\r\n        <span class=\"titleOne\">Make Copies</span>\r\n    </div>\r\n    <div class=\"gap20\"></div>\r\n    <div class=\"gap10\"></div>\r\n    <ng-container>\r\n        <div class=\"transWrapper\">\r\n            <form [formGroup]=\"nftForm\" (ngSubmit)=\"onSubmit(nftForm)\">\r\n                <div class=\"gap10\"></div>\r\n                <p class=\"titleTwo\" style=\"opacity: 0.8;\">Here you can add more copies to an existing NFT and specify\r\n                    how many more you would like. </p>\r\n                <div class=\"gap10\"></div>\r\n                <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                <label class=\"dark_mode_text\" for=\"title\">Title of the NFT (Must be fewer than 61 characters)</label>\r\n                </div>\r\n                <div class=\"col-md-2\">\r\n                <input class=\" form-control text_box_two\" type=\"text\" value=\"{{title_name}}\" maxlength=\"61\" name=\"title\"\r\n                    id=\"title\" disabled>\r\n                </div>\r\n                </div>\r\n                <div class=\"gap10\"></div>\r\n                <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                <label class=\"dark_mode_text\" for=\"qualname\">Verification Domain Name:</label>\r\n                </div>\r\n                <div class=\"col-md-2\">\r\n                <input class=\"form-control text_box_two\" type=\"text\" value=\"{{domain_name}}\"\r\n                    placeholder=\"YourDomain.com\" maxlength=\"61\" disabled>\r\n                </div>\r\n                </div>\r\n                <!-- <div class=\"lineSection\">\r\n            <div class=\"formField customDropdownWrap\">\r\n              <label for=\"\">Title of the NFT (Must be less than 61 characters)</label>\r\n              <input type=\"text\" formControlName=\"title\"  value=\"{{nftName}}\"\r\n                 (click)=\"customSelToggler1()\">\r\n\r\n              <div class=\"customDropdownHolder scroll\" *ngIf=\"customSelectorOpen1 && data.length > 0\" >\r\n                <span class=\"ddItem\" *ngFor=\"let item of data; let i = index;\"\r\n                (click)=\"customSelector1(title[i])\">{{title[i]}}</span>\r\n              </div>\r\n            </div>\r\n          </div> -->\r\n\r\n                <div class=\"gap10\"></div>\r\n                <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                <label class=\"dark_mode_text\" for=\"nftnumber\">Number of NFTs to add:</label>\r\n                </div>\r\n                <div class=\"col-md-2\">\r\n                <input class=\"form-control text_box_two\" type=\"number\" formControlName=\"nftnumber\" id=\"nftnumber\" value=\"1\"\r\n                    (change)=\"balancecheck()\" name=\"nftnumber\">\r\n                </div>\r\n                </div>\r\n\r\n                <div class=\"gap20\"></div>\r\n                <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                <label class=\"dark_mode_text\" for=\"IncludeOtherText\">Wallet to get coins from:</label>\r\n                </div>\r\n                <div class=\"col-md-2\">\r\n                <div class=\"lineSection\">\r\n                    <div class=\"customeDropdownTwo\">\r\n                        <div class=\"triger\" (click)=\"customSelToggler()\">\r\n                            <span>{{cSelectorText}}</span>\r\n                        </div>\r\n                        <div class=\"menuShowTwo scroll\" *ngIf=\"customSelectorOpen\">\r\n                            <div class=\"menus\" *ngFor=\"let data of all; let i = index;\"\r\n                                (click)=\"customSelector(data.name)\">\r\n                                <span>{{data.name}}</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                 </div>\r\n                </div>\r\n                </div>\r\n\r\n                <!-- </div> -->\r\n\r\n                <div class=\"transBottomFooter\">\r\n                    <div class=\"bottomPartSubmit\">\r\n                        <div class=\"bottomFooter\">\r\n                            <div class=\"container\">\r\n                                <button href=\"javascript:;\" class=\"btnCustomBlue btnLarge\"\r\n                                    [ngClass]=\"{btnDisable: this.nftForm.invalid ||  this.walletselected == false }\"\r\n                                    type=\"submit\">Create\r\n                                    NFT</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"onEventLoadWrap\" *ngIf=\"showLoader\">\r\n        <ng-container>\r\n            <div class=\"text-center  loader_show\">\r\n                <ng-lottie height=\"150px\" [options]=\"options\" (animationCreated)=\"animationCreated($event)\"></ng-lottie>\r\n                <span style=\"color:#ffffff\">{{loadingMessage}}</span>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n"],"sourceRoot":"webpack:///"}