{"version":3,"sources":["./src/app/auth/create-localwallet/upload-local-cc/upload-local-cc.component.ts","./src/app/auth/create-localwallet/upload-local-cc/upload-local-cc.component.html","./src/app/auth/create-localwallet/upload-local-cc/upload-local-cc-routing.module.ts","./src/app/auth/create-localwallet/upload-local-cc/upload-local-cc.module.ts"],"names":[],"mappings":"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","file":"upload-local-cc-upload-local-cc-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-upload-local-cc',\r\n  templateUrl: './upload-local-cc.component.html',\r\n  styleUrls: ['./upload-local-cc.component.scss']\r\n})\r\nexport class UploadLocalCcComponent implements OnInit {\r\n\r\n  successInfo:boolean = false;\r\n  successMsg:any='';\r\n  errorInfo:boolean = false;\r\n  errorMsg:any='';\r\n  payload:any=null;\r\n  taskId:any=null;\r\n  showError: boolean = false;\r\n  isSelect: boolean;\r\n  user: any;\r\n  fileName: string = '';\r\n  userLocal: any;\r\n  baseAdd: any;\r\n  file: any;\r\n  btn: boolean = false;\r\n  afterClick: boolean = false;\r\n\r\n  constructor(private raida: ApiService,\r\n    private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userLocal = localStorage.getItem('userLocal'); \r\n  }\r\n\r\n  getUploadedFiles(files) {\r\n    this.fileName = files.target.files[0].name;\r\n    this.btn = false;\r\n    this.successInfo  =false;\r\n    this.errorInfo = false;\r\n    let reader = new FileReader();\r\n      let file = files.target.files[0];\r\n      reader.readAsDataURL(file);\r\n      reader.onload  = () => {\r\n        console.log(reader.result)\r\n        this.baseAdd = reader.result\r\n      }\r\n  }\r\n\r\n  //  async doCheck(taskID: any, xdata: any){\r\n  //   let task:any = await this.raida.doCheck(taskID);\r\n  //     console.log(\"Task done: \", task);\r\n      \r\n  //     if(task){\r\n  //       this.payload = task.payload;\r\n  //       if (this.payload.status == \"error\" || this.payload.status == \"completed\") {\r\n  //         if(this.payload.status == \"completed\"){\r\n  //           this.router.navigate(['/localwallet/localstep-completed'])\r\n  //         }\r\n  //         let data = this.payload.data;\r\n  //         this.successMsg = \"Done: \" + data.message;\r\n  //         let h = \"\";\r\n  //         this.raidaCheck = true;\r\n  //         this.serversList = h;\r\n  //         this.errorInfo = false;\r\n  //         return;\r\n  //       }\r\n  //       this.successMsg = \"Doing.... Task ID \" + taskID + \", Progress \" + this.payload.progress + \"%\";\r\n  //       setTimeout(() => {\r\n  //         this.doCheck(taskID, xdata)\r\n  //       },1000)\r\n\r\n  //     }\r\n  //     else{\r\n  //       this.errorInfo = true;\r\n  //       this.successInfo = false;\r\n  //       this.errorMsg = \"Call Failed\";\r\n  //     }\r\n  // }\r\n\r\n  // async detectWallet(File){\r\n  //   this.raidaCheck = true;\r\n  //     try{\r\n  //       var cs = JSON.parse(File);\r\n  //       if(cs.cloudcoin.length !== 0){\r\n  //       }\r\n  //     }\r\n  //     catch(e) {\r\n  //       this.detect = false;\r\n  //       this.errorInfo = true;\r\n  //       this.successInfo =false;\r\n  //       this.errorMsg = \"Failed to parse json\";\r\n  //    } \r\n  //    let idata = {\r\n  //     coins: [\r\n  //      { 'sn':parseInt('sn'),\r\n  //       'ans': String\r\n  //     }\r\n  //   ]\r\n  //  }\r\n\r\n  //   for (let i = 0; i < cs?.cloudcoin?.length; i++) {\r\n  //     let cc = cs.cloudcoin[i]\r\n  //     idata.coins[i] =  {\r\n  //     'sn': parseInt(cc.sn, 10),\r\n  //     'ans': cc.an\r\n  //   }\r\n  // }\r\n    \r\n  //   let detection: any = await this.raida.detect(JSON.stringify(idata));\r\n  //   console.log(detection, \"response\");\r\n  //   if(detection.status == 'success'){\r\n  //     this.raidaCheck = true;\r\n  //     this.successInfo = true;\r\n  //     this.errorInfo = false;\r\n  //     let taskId = detection.payload\r\n  //     this.successMsg = \"Detect sent. Task ID \" + taskId.id;\r\n  //     this.doCheck(taskId.id, (data: any)=>{\r\n  //       this.successInfo = true;\r\n  //       this.successMsg  =\"Done \" + JSON.stringify(data)\r\n  //     })\r\n  //   }\r\n  //   else{\r\n  //     this.errorInfo = true;\r\n  //     this.successInfo = false;\r\n  //     this.errorMsg = \"Failed \" + detection.payload.message;\r\n  //   }\r\n    \r\n  // }\r\n\r\n  async doCheck(taskID: any, xdata: any){\r\n    let task:any = await this.raida.doCheck(taskID);\r\n      console.log(\"Task done: \", task);\r\n      if(task){\r\n        this.payload = task.payload;\r\n        if (this.payload.status == \"error\" || this.payload.status == \"completed\") {\r\n        if(this.payload.status == \"completed\"){\r\n          this.router.navigate(['/localwallet/localstep-completed']);\r\n          if(this.payload?.data?.counterfeit !== 0 || this.payload?.data?.limbo !== 0 || this.payload?.data?.fracked !==0){\r\n            this.afterClick = true;\r\n          }\r\n        }\r\n        else{\r\n          this.btn = true;\r\n          Swal.fire({\r\n            title: this.payload.data.message,\r\n            icon: 'warning',\r\n            confirmButtonText: 'Okay',\r\n          }).then((result) => {\r\n            if (result.value) {{}}\r\n          });\r\n        }\r\n          // if(this.payload.data.limbo != 0){\r\n          //   Swal.fire({\r\n          //     title: 'Contact was lost with the RAIDA during your request due to loss of internet connectivity. It is unknown if the coin passwords have been changed. This can be fixed once a solid internet connection is restored.',\r\n          //     icon: 'warning',\r\n          //     confirmButtonText: 'Okay',\r\n          //   }).then((result) => {\r\n          //     if (result.value) {{}}\r\n          //   });\r\n          // }\r\n          // else if(this.payload.data.counterfeit != 0){\r\n          //   Swal.fire({\r\n          //     title: this.payload?.data?.counterfeit +' Counterfeit CC Encounter!',\r\n          //     icon: 'info',\r\n          //     confirmButtonText: 'Okay',\r\n          //   }).then((result) => {\r\n          //     if (result.value) {{}}\r\n          //   });\r\n          // }\r\n          // else if(this.payload.data.fracked != 0){\r\n          //   Swal.fire({\r\n          //     title: this.payload.data.fracked +' Fracked CC Encounter!',\r\n          //     icon: 'info',\r\n          //     confirmButtonText: 'Okay',\r\n          //   }).then((result) => {\r\n          //     if (result.value) {{}}\r\n          //   });\r\n          // }\r\n          let data = this.payload.data;\r\n          this.successInfo = true;\r\n          this.successMsg = \"Done: \" + data.message;\r\n          this.errorInfo = false;\r\n          return;\r\n        }\r\n        this.successInfo = true;\r\n        this.successMsg = \"Doing.... Task ID \" + taskID + \", Progress \" + this.payload.progress + \"%\";\r\n        setTimeout(() => {\r\n          this.doCheck(taskID, xdata)\r\n        },500)\r\n      }\r\n      else{\r\n        this.errorInfo = true;\r\n        this.successInfo = false;\r\n        this.errorMsg = \"Call Failed\";\r\n        this.btn = true;\r\n      }\r\n  }\r\n\r\n  async next(){\r\n    var file = this.baseAdd?.split(',')[1];\r\n    try{\r\n      var data = {\r\n        name: this.userLocal,\r\n        items: [{\r\n          type: 'inline',\r\n          data: file\r\n        }]\r\n      }\r\n      let response: any = await this.raida.import(data);\r\n      console.log(response, \"876rfvjkl,\");\r\n      this.doCheck(response.payload?.id, (data: any)=>{\r\n        this.successInfo = true;\r\n        this.successMsg  =\"Done \" + JSON.stringify(data)\r\n      })\r\n    }\r\n    catch(e){\r\n\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"authWrapper authWrapperDeposit\">\r\n  <a href=\"javascript:;\" routerLink=\"/localwallet\" class=\"backlinkBtn\"><img src=\"assets/back_arrow.svg\" alt=\"\"></a>\r\n\r\n  <div class=\"bodyInnerWrapper\">\r\n    <div class=\"stepperHolder\">\r\n      <div class=\"stepperWrap\">\r\n        <div class=\"step stepActive\">\r\n          <div class=\"circleWrap\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n          <div class=\"steptextWrap\">\r\n            <span class=\"amount\">Name Setup</span>\r\n          </div>\r\n        </div>\r\n        <!-- <div class=\"step stepActive\">\r\n          <div class=\"circleWrap\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n          <div class=\"steptextWrap\">\r\n            <span class=\"amount\">Security setup</span>\r\n          </div>\r\n        </div> -->\r\n        <div class=\"step stepActive\">\r\n          <div class=\"circleWrap\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n          <div class=\"steptextWrap\">\r\n            <span class=\"amount\">Deposit CC</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"step\">\r\n          <div class=\"circleWrap\">\r\n            <div class=\"circle\"></div>\r\n          </div>\r\n          <div class=\"steptextWrap\">\r\n            <span class=\"amount\">Completed</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"container\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-8\" *ngIf=\"!afterClick\">\r\n          <h2 class=\"titleOne\">Deposit CloudCoins to your Wallet.</h2>\r\n          <p class=\"titleTwo\" style=\"opacity: 0.8;\">CloudCoins are files with verification keys in them. You can import\r\n            files with the following extensions: png, stack, cc and zip.</p>\r\n          <div class=\"skyAddressFieldWrap\">\r\n            <div class=\"formField\">\r\n              <label for=\"username\">Deposit CloudCoins</label>\r\n              <div class=\"uploadFileWrap\">\r\n                <span>{{fileName || \"Choose CloudCoins to Deposit\"}}</span>\r\n                <div class=\"uploadIconWrap\">\r\n                  <input type=\"file\" (change)=\"getUploadedFiles($event)\" accept=\".png, .id, .bin\">\r\n                  <img src=\"assets/folder_icon.svg\" alt=\"\" class=\"folderIcon\">\r\n                </div>\r\n              </div>\r\n              <ng-container>\r\n                <span class=\"errorMsg\" *ngIf=\"errorInfo\"><img src=\"assets/error_info_icon.svg\"\r\n                    alt=\"error icon\">{{this.errorMsg}}</span>\r\n                <span class=\"successMsg\" *ngIf=\"successInfo\"><img src=\"assets/info_green.svg\" alt=\"error icon\">\r\n                  {{this.successMsg}}</span>\r\n              </ng-container>\r\n            </div>\r\n            <div class=\"gap10\"></div>\r\n            <div class=\"uploadBtnWrap\">\r\n              <a href=\"javascript:;\" [ngClass]=\"{'btnDisable' : this.btn == true}\" class=\"btnCustomBlue btnLarge\"\r\n                (click)=\"next()\">Deposit To My Wallet</a>\r\n              <!-- <a href=\"javascript:;\" class=\"uploadLaterLink\" routerLink=\"/localwallet/localstep-completed\">I'll import cc later</a> -->\r\n              <a href=\"javascript:;\" class=\"btnCustomBlue ml-2\" routerLink=\"/localwallet/localstep-completed\">I'll\r\n                Deposit Later</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"col=md-8\" *ngIf=\"afterClick\">\r\n          <div class=\"formField\">\r\n            <label for=\"\">Deposited to: &nbsp; <span style=\"opacity: 0.7;\">Active Wallet</span></label>\r\n          </div>\r\n          <div class=\"formField\">\r\n            <label for=\"\">Coins Attempted: &nbsp; <span style=\"opacity: 0.7;\">{{totalimport}}</span></label>\r\n          </div>\r\n          <div class=\"formField\" *ngIf=\"payload?.data?.authentic !== 0\">\r\n            <label for=\"\">Authentic Coins: &nbsp; <span\r\n                style=\"opacity: 0.7;\">{{payload?.data?.authentic}}</span></label>\r\n          </div>\r\n          <div class=\"formField\" *ngIf=\"payload?.data?.counterfeit !== 0\">\r\n            <label for=\"\">Counterfeit Coins: &nbsp; <span\r\n                style=\"opacity: 0.7;\">{{payload?.data?.counterfeit}}</span></label>\r\n          </div>\r\n          <div class=\"formField\" *ngIf=\"payload?.data?.fracked !== 0\">\r\n            <label for=\"\">Fractured Coins: &nbsp; <span style=\"opacity: 0.7;\">{{payload?.data?.fracked}}</span></label>\r\n          </div>\r\n          <div class=\"formField\" *ngIf=\"payload?.data?.limbo !== 0\">\r\n            <label for=\"\">Unprocessed Coins: &nbsp; <span style=\"opacity: 0.7;\">{{payload?.data?.limbo}}</span></label>\r\n          </div>\r\n          <div class=\"gap10\"></div>\r\n          <a href=\"javascript:;\" class=\"btnCustomBlue btnLarge\" routerLink=\"/localwallet/localstep-completed\">Next</a>\r\n        </div>\r\n        <div class=\"col-md-4\">\r\n          <img src=\"assets/localwallet-upload-cc-black-white.png\" alt=\"rocket image\" class=\"stepperMainImg\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"bottomPartSubmit\"\r\n    style=\"border-top: 2px solid rgba(255, 255, 255, 0.26); padding-top: 20px; padding-bottom: 10px;\">\r\n    <div class=\"container\">\r\n      <span class=\"infoText\">\r\n        <!-- <img src=\"assets/info_circle.svg\" alt=\"\">You can go to exchanges.bitcoin.com or cloudcoin.global to buy CloudCoins and import those files here. -->\r\n        <img src=\"assets/info_circle.svg\" alt=\"\">You can learn where to get CC by going to\r\n        https://CloudCoin.global.\r\n      </span>\r\n      <span class=\"infoText\">\r\n        <img src=\"assets/info_circle.svg\" alt=\"\">Receive files that contain CC from your friends/colleagues and\r\n        Deposit them here or later inside the application.\r\n      </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UploadLocalCcComponent } from './upload-local-cc.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UploadLocalCcComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UploadLocalCcRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UploadLocalCcRoutingModule } from './upload-local-cc-routing.module';\r\nimport { UploadLocalCcComponent } from './upload-local-cc.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [UploadLocalCcComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UploadLocalCcRoutingModule\r\n  ]\r\n})\r\nexport class UploadLocalCcModule { }\r\n"],"sourceRoot":"webpack:///"}