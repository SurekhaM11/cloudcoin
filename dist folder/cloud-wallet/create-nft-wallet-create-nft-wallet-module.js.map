{"version":3,"sources":["./src/app/dashboard/create-nft-wallet/create-nft-wallet.component.ts","./src/app/dashboard/create-nft-wallet/create-nft-wallet.component.html","./src/app/dashboard/create-nft-wallet/create-nft-wallet-routing.module.ts","./src/app/dashboard/create-nft-wallet/create-nft-wallet.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAkD;AAC+B;AAIlD;;;;;;;;ICSnB,sEACI;IAAA,wEAAoB;IAAA,yNAA4J;IAAA,4DAAI;IACxL,4DAAM;;;IAuCE,2EAA2E;IAAA,qEACjB;IAAA,6EAAkB;IAAA,4DAAO;;;IAFvF,sEACI;IAAA,8HACmF;IACnF,2EAAwB;IAAA,qEAAwD;IAAA,4GAC1C;IAAA,4DAAO;IACjD,4DAAM;;;IAJuB,0DAAgD;IAAhD,2KAAgD;;;IAsBzE,sEACI;IAAA,2EAAwB;IAAA,qEAAuD;IAAA,sHAEpC;IAAA,4DAAO;IACtD,4DAAM;;;IApBV,sEACI;IAAA,0EACI;IAAA,0EACI;IAAA,4EAA6C;IAAA,gGACzC;IAAA,2EACI;IAAA,qEAGJ;IAAA,4DAAO;IACX,4DAAQ;IACZ,4DAAM;IACN,0EACI;IAAA,4EAEJ;IADuB,4KAAiB,uBAAuB,IAAC;IAD5D,4DAEJ;IAAA,4DAAM;IACV,4DAAM;IACN,2HAIM;IACV,4DAAM;;;IALI,0DAA6B;IAA7B,gGAA6B;;;;IAmBnB,0EAEI;IADA,mXAAmC,OAAO,KAAE;IAC5C,qEACA;IAAA,uEAAM;IAAA,uDAAa;IAAA,4DAAO;IAC9B,4DAAM;;;IADI,0DAAa;IAAb,8EAAa;;;IAJ3B,0EACI;IAAA,4HAIM;IACV,4DAAM;;;IALkC,0DAAQ;IAAR,+EAAQ;;;IAsBhE,2EACiF;IAAA,4EAClE;IAAA,4DAAO;;;IAcd,2EAAiF;IAAA,qEACvB;IAAA,mFAAwB;IAAA,4DAAO;;;IAF7F,sEACI;IAAA,8HACyF;IACzF,2EAAwB;IAAA,qEAAwD;IAAA,mGAEtD;IAAA,4DAAO;IACrC,4DAAM;;;IALuB,0DAAsD;IAAtD,uLAAsD;;;;IAoHvG,0EACI;IAAA,wEACI;IAAA,0EACI;IAAA,gFAA4F;IAA9C,4WAA6C;IAAC,4DAAY;IACxG,2EAA4B;IAAA,uDAAkB;IAAA,4DAAO;IACzD,4DAAM;IACV,qEAAe;IACnB,4DAAM;;;IAJgC,0DAAmB;IAAnB,mFAAmB;IACjB,0DAAkB;IAAlB,sFAAkB;;;AD/OnD,MAAM,wBAAwB;IA0CnC,YAAoB,EAAe,EACzB,OAAqB,EACrB,GAAe,EACf,MAAc;QAHJ,OAAE,GAAF,EAAE,CAAa;QACzB,YAAO,GAAP,OAAO,CAAc;QACrB,QAAG,GAAH,GAAG,CAAY;QACf,WAAM,GAAN,MAAM,CAAQ;QA5BxB,SAAI,GAAQ,EAAE,CAAC;QAEf,YAAO,GAAQ,EAAE,CAAC;QAClB,UAAK,GAAU,EAAE,CAAC;QAQlB,aAAQ,GAAY,KAAK,CAAC;QAC1B,mBAAc,GAAY,KAAK,CAAC;QAChC,iBAAY,GAAY,KAAK,CAAC;QAC9B,eAAU,GAAG,KAAK,CAAC;QACnB,mBAAc,GAAW,EAAE,CAAC;QAC5B,YAAO,GAAqB;YAC1B,IAAI,EAAE,+DAA+D;SACtE,CAAC;QAWA,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC1B,CAAC;IAEK,QAAQ;;YACZ,6GAA6G;YAC7G,IAAI,CAAC,MAAM,GAAG,8DAA8D,CAAC;YAC7E,IAAI,CAAC,OAAO,GAAG,IAAI,wDAAS,CAAC;gBAC3B,OAAO,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;gBACxF,SAAS,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC/D,WAAW,EAAE,IAAI,0DAAW,CAAC,CAAC,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzE,YAAY,EAAE,IAAI,0DAAW,CAAC,OAAO,CAAC;gBACtC,cAAc,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;gBACnC,cAAc,EAAE,IAAI,0DAAW,CAAC,EAAE,CAAC;gBACnC,aAAa,EAAE,IAAI,0DAAW,CAAC,SAAS,CAAE;gBAC1C,cAAc,EAAE,IAAI,0DAAW,CAAC,CAAC,EAAE,CAAC,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC1E,UAAU,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,yDAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzE,aAAa,EAAE,IAAI,0DAAW,EAAE;gBAChC,eAAe,EAAE,IAAI,0DAAW,EAAE;aACnC,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACnD,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC3C,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,oCAAoC;YACpC,IAAI,QAAQ,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;YACnD,IAAI,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAE;gBACjC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC;gBAC9C,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC3C,IAAI,IAAI,CAAC,UAAU,IAAI,WAAW,EAAE;oBAClC,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;oBAC5C,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACtC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC;oBACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;iBAC1B;qBACI;oBACH,wBAAwB;oBACxB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;oBACxB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;iBAC3B;gBACD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;oBACtB,OAAO,EAAE,IAAI,CAAC,KAAK;iBACpB,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;aACjD;YACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;YACvB,YAAY;YACZ,OAAO,QAAQ;QACjB,CAAC;KAAA;IAGD,YAAY,CAAC,KAAU;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO;YACzC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC;IACjF,CAAC;IAEK,QAAQ,CAAC,IAAe;;YAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;YACzB,IAAI,CAAC,SAAS,EAAE;QAClB,CAAC;KAAA;IAEK,YAAY;;YAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;YACrD,IAAI,QAAQ,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjE,IAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,EAAE;gBAC7C,kDAAI,CAAC,IAAI,CAAC;oBACR,KAAK,EAAE,yEAAyE,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI;oBAClH,IAAI,EAAE,MAAM;oBACZ,iBAAiB,EAAE,MAAM;iBAC1B,CAAC;aACH;QACH,CAAC;KAAA;IAEK,cAAc,CAAC,GAAW,EAAE,IAAY;;YAC5C,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;YACpB,IAAI,CAAC,YAAY,GAAG,4BAA4B,CAAC;YACjD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACtC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC;YACnC,IAAI,CAAC,aAAa,GAAG,GAAG;YACxB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,IAAI,CAAC,cAAc,CAAC;YACrD,IAAI,QAAQ,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjE,IAAI,QAAQ,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,EAAE;gBACjC,kDAAI,CAAC,IAAI,CAAC;oBACR,KAAK,EAAE,oDAAoD;oBAC3D,IAAI,EAAE,MAAM;oBACZ,iBAAiB,EAAE,MAAM;iBAC1B,CAAC,CAAC;aACJ;QAEH,CAAC;KAAA;IACD,gBAAgB,CAAC,GAAW;QAC1B,IAAI,CAAC,kBAAkB,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC;IACrD,CAAC;IAEK,YAAY;;YAChB,IAAI;gBACF,IAAI,QAAa,CAAC;gBAClB,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;gBACtC,IAAI,QAAQ,CAAC,MAAM,IAAI,SAAS,EAAE;oBAChC,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC;oBAC5B,uBAAuB;oBACvB,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC;oBAClC,IAAI,CAAC,YAAY,GAAG,4BAA4B,CAAC;oBACjD,8BAA8B;oBAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;oBACtC,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;oBAChC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;oBAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI;oBAChC,GAAG;iBACJ;aACF;YACD,OAAO,CAAC,EAAE;gBACR,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAChB;QACH,CAAC;KAAA;IACD,WAAW,CAAC,CAAC;QACX,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,sBAAsB,GAAG,IAAI,CAAC,MAAM,CAAC;QACjD,IAAI,IAAI,CAAC,MAAM,IAAI,OAAO,EAAE;YAC1B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC;SAChD;aACI,IAAI,IAAI,CAAC,MAAM,IAAI,MAAM,EAAE;YAC9B,IAAI,CAAC,UAAU,GAAG,IAAI;YACtB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;SAC7B;IACH,CAAC;IAEK,OAAO;;YACX,IAAI;gBACF,IAAI,QAAQ,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;gBAChD,IAAI,QAAQ,CAAC,MAAM,IAAI,SAAS,EAAE;oBAChC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBAC7C,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACjF,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,OAAO,EAAE;wBACpC,kDAAI,CAAC,IAAI,CAAC;4BACR,KAAK,EAAE,wCAAwC;4BAC/C,IAAI,EAAE,MAAM;4BACZ,iBAAiB,EAAE,MAAM;yBAC1B,CAAC;wBACF,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;qBAChB;oBACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;iBACtB;qBACI;oBACH,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;oBACtB,kDAAI,CAAC,IAAI,CAAC;wBACR,KAAK,EAAE,iBAAiB;wBACxB,IAAI,EAAE,MAAM;wBACZ,iBAAiB,EAAE,MAAM;qBAC1B,CAAC;iBACH;aACF;YACD,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;aACnB;QACH,CAAC;KAAA;IAED,sBAAsB;IAEtB,UAAU;IAEV,qDAAqD;IACrD,kEAAkE;IAClE,QAAQ;IACR,mBAAmB;IACnB,6BAA6B;IAC7B,uBAAuB;IACvB,yBAAyB;IACzB,QAAQ;IACR,uDAAuD;IACvD,2CAA2C;IAC3C,2BAA2B;IAC3B,4DAA4D;IAE5D,YAAY;IACZ,eAAe;IAEf,oBAAoB;IACpB,2CAA2C;IAC3C,yBAAyB;IACzB,qCAAqC;IACrC,8BAA8B;IAC9B,oCAAoC;IACpC,YAAY;IACZ,QAAQ;IACR,MAAM;IAEN,gBAAgB;IAChB,sBAAsB;IAEtB,MAAM;IACN,IAAI;IAEJ,2CAA2C;IAC3C,oDAAoD;IAGpD,gBAAgB;IAChB,mCAAmC;IACnC,iEAAiE;IAEjE,kFAAkF;IAClF,kDAAkD;IAElD,mEAAmE;IAEnE,UAAU;IACV,gBAAgB;IAChB,QAAQ;IACR,yBAAyB;IACzB,oCAAoC;IACpC,cAAc;IAEd,MAAM;IACN,IAAI;IAEE,SAAS;;;YACb,IAAI;gBACF,IAAI,IAAI,GAAG;oBACT,IAAI,EAAE,IAAI,CAAC,QAAQ;oBACnB,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC;oBACnD,aAAa,EAAE,IAAI,CAAC,IAAI;oBACxB,6DAA6D;oBAC7D,0DAA0D;oBAC1D,yDAAyD;oBACzD,qDAAqD;oBACrD,qDAAqD;oBACrD,qBAAqB;oBACrB,yDAAyD;oBACzD,UAAU,EAAE,SAAS;oBACrB,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC;oBACtD,IAAI,EAAE,EAAE;oBACR,CAAC,EAAE,EAAE;oBACL,CAAC,EAAE,EAAE;oBACL,WAAW,EAAE,IAAI;oBACjB,SAAS,EAAE,EAAE;oBACb,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;oBAClD,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC;oBAC1D,cAAc,EAAE,IAAI;oBACpB,QAAQ,EAAE,KAAK;iBAChB;gBACD,IAAI,QAAQ,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBACzD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,cAAc,GAAG,iBAAiB;gBACvC,IAAI,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAE;oBACjC,IAAI,CAAC,QAAQ,OAAC,QAAQ,CAAC,OAAO,0CAAE,EAAE,EAAE,CAAC,IAAS,EAAE,EAAE;oBAClD,CAAC,CAAC,CAAC;iBACJ;aACF;YACD,OAAO,CAAC,EAAE;gBACR,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAChB;;KACF;IAEK,QAAQ,CAAC,MAAW,EAAE,KAAU;;YACpC,IAAI,IAAI,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC/C,IAAI,IAAI,EAAE;gBACR,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC5B,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,WAAW,EAAE;oBACxE,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,WAAW,EAAE;wBACtC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC;wBAChC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;wBACxB,kDAAI,CAAC,IAAI,CAAC;4BACR,KAAK,EAAE,mCAAmC;4BAC1C,IAAI,EAAE,SAAS;4BACf,iBAAiB,EAAE,MAAM;yBAC1B,CAAC;wBACF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC;qBACzD;yBAAM;wBACL,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;wBACxB,kDAAI,CAAC,IAAI,CAAC;4BACR,KAAK,EAAE,sBAAsB;4BAC7B,IAAI,EAAE,OAAO;4BACb,iBAAiB,EAAE,MAAM;yBAC1B,CAAC;wBACF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;wBAChD,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;qBAC1B;oBACD,OAAO;iBACR;gBACD,UAAU,CAAC,GAAG,EAAE;oBACd,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC;gBAC9B,CAAC,EAAE,GAAG,CAAC;aACR;QACH,CAAC;KAAA;IAED,WAAW,CAAC,KAAK;QACf,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;QACzB,IAAI,KAAK,EAAE;YAET,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SAExB;aAAM;YAEL,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SAEzB;IAEH,CAAC;IAGD,gBAAgB,CAAC,aAA4B;QAC3C,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC7B,CAAC;IACK,cAAc;;YAClB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;YACtB,IAAI;gBACF,IAAI,QAAQ,GAAQ,MAAM,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;gBACnD,IAAI,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAE;oBACjC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC;oBAC9C,wDAAwD;oBACxD,8CAA8C;oBAC9C,6CAA6C;oBAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;oBAC5C,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACtC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC;iBACzB;qBAAM;oBACL,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;iBACjD;gBACD,4BAA4B;gBAC5B,8BAA8B;gBAC9B,wBAAwB;gBACxB,wBAAwB;gBACxB,wBAAwB;gBAExB,KAAK;gBACL,OAAO,IAAI,CAAC,KAAK,CAAC;aACnB;YAED,OAAO,CAAC,EAAE;gBACR,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aAEhB;QAEH,CAAC;KAAA;;gGAjYU,wBAAwB;wGAAxB,wBAAwB;QCfrC,yEACI;QAAA,yEACI;QAAA,0EAAuB;QAAA,qEAAU;QAAA,4DAAO;QAC5C,4DAAM;QACN,0EACI;QADwB,oJAAY,yBAAiB,IAAC;QACtD,yEACI;QAAA,oEAAyB;QACzB,uEAA0C;QAAA,mMAE8B;QAAA,4DAAI;QAC5E,oEAAyB;QAIzB,sHAEM;QACN,qEAAyB;QACzB,qEAAyB;QAQzB,yEACI;QAAA,0EACI;QAAA,2EACI;QAAA,2EACI;QAAA,6EAAsB;QAAA,gFAAoB;QAAA,4DAAQ;QACtD,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,wEAAM;QAAA,wDAAQ;QAAA,4DAAO;QACrB,2EACI;QADmB,8IAAS,aAAS,IAAC;QACtC,sEACJ;QAAA,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,qEAAyB;QACzB,2EACI;QAAA,2EACI;QAAA,6EAA0C;QAAA,+GAC3B;QAAA,4DAAQ;QAC3B,4DAAM;QACN,2EACI;QAAA,6EAEJ;QADgC,sKAAiB,uBAAuB,IAAC;QADrE,4DAEJ;QAAA,4DAAM;QACV,4DAAM;QACN,sHAKM;QACN,qEAAyB;QACzB,uHAqBM;QACN,qEAAyB;QACzB,2EACI;QAAA,2EACI;QAAA,6EAAqD;QAAA,qFAAyB;QAAA,4DAAQ;QAC1F,4DAAM;QACN,2EACI;QAAA,2EACI;QAAA,2EACI;QAAA,2EACI;QADgB,8IAAS,qBAAiB,OAAO,CAAC,IAAC;QAEnD,wEAAM;QAAA,wDAAiB;QAAA,4DAAO;QAClC,4DAAM;QACN,uHAMM;QAEV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QAEN,qEAAyB;QACzB,2EACI;QAAA,2EACI;QAAA,6EAA8C;QAAA,qFAAyB;QAAA,4DAAQ;QACnF,4DAAM;QACN,2EACI;QAAA,6EAEJ;QADiC,kJAAU,kBAAc,IAAC;QADtD,4DAEJ;QAAA,4DAAM;QACV,4DAAM;QACN,yHAEsB;QACtB,qEAAyB;QACzB,0EACI;QAAA,2EACI;QAAA,2EACI;QAAA,6EAAgD;QAAA,wEAAY;QAAA,4DAAQ;QACxE,4DAAM;QACN,2EACI;QAAA,2EAEgC;QACpC,4DAAM;QACV,4DAAM;QACN,sHAMM;QACV,4DAAM;QACN,qEAAyB;QACzB,qEAAyB;QACzB,wEAA0C;QAAA,iKAEN;QAAA,4DAAI;QAwF5C,qEAAe;QACf,2EACI;QAAA,2EACI;QAAA,2EACI;QAAA,2EACI;QAAA,8EAEkB;QAAA,sEACX;QAAA,4DAAS;QACpB,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAM;QACV,4DAAO;QACX,4DAAM;QAEN,uHAOM;;QA7PI,0DAAqB;QAArB,kFAAqB;QAUb,0DAAmB;QAAnB,mFAAmB;QAoBC,2DAAQ;QAAR,yEAAQ;QAoBxB,2DAA2B;QAA3B,2FAA2B;QAO3B,0DAAkB;QAAlB,kFAAkB;QAgCE,2DAAiB;QAAjB,kFAAiB;QAEM,0DAAwB;QAAxB,wFAAwB;QAwBpE,0DAAyE;QAAzE,6IAAyE;QAcpE,0DAAiC;QAAjC,iGAAiC;QA0G3B,0DAAyG;QAAzG,wNAAyG;QAW3G,0DAAgB;QAAhB,gFAAgB;;6FD3OjC,wBAAwB;cALpC,uDAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,WAAW,EAAE,oCAAoC;gBACjD,SAAS,EAAE,CAAC,oCAAoC,CAAC;aAClD;;;;;;;;;;;;;;AEdD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AACkB;AAC1B;;;AAC/C,2DAA2D;AAC3D,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,qFAAwB,EAAE;CAClD,CAAC;AAQK,MAAM,4BAA4B;;2GAA5B,4BAA4B;kLAA5B,4BAA4B,kBAL9B,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,4DAAY;SAEpD,EACS,4DAAY;mIAEX,4BAA4B,4EALE,4DAAY,aAG3C,4DAAY;6FAEX,4BAA4B;cANxC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,4DAAY;iBAEpD;gBACD,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACdD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACM;AAEkC;AACH;AAEL;;AAUlE,MAAM,qBAAqB;;oGAArB,qBAAqB;oKAArB,qBAAqB,kBAPvB;YACP,4DAAY;YACZ,8FAA4B;YAC5B,kEAAmB;YACnB,0DAAW;SACZ;mIAEU,qBAAqB,mBARjB,qFAAwB,aAErC,4DAAY;QACZ,8FAA4B;QAC5B,kEAAmB;QACnB,0DAAW;6FAGF,qBAAqB;cATjC,sDAAQ;eAAC;gBACR,YAAY,EAAE,CAAC,qFAAwB,CAAC;gBACxC,OAAO,EAAE;oBACP,4DAAY;oBACZ,8FAA4B;oBAC5B,kEAAmB;oBACnB,0DAAW;iBACZ;aACF","file":"create-nft-wallet-create-nft-wallet-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport { EventService } from 'src/app/services/event.service';\r\nimport Swal from 'sweetalert2';\r\nimport { AnimationOptions } from 'ngx-lottie';\r\nimport { AnimationItem } from 'lottie-web';\r\n\r\n\r\n@Component({\r\n  selector: 'app-create-nft-wallet',\r\n  templateUrl: './create-nft-wallet.component.html',\r\n  styleUrls: ['./create-nft-wallet.component.scss']\r\n})\r\nexport class CreateNftWalletComponent implements OnInit {\r\n\r\n  nftForm: FormGroup;\r\n  public format: any;\r\n  public direction: any;\r\n  public transperancy: number;\r\n  public textformat: boolean;\r\n  public colorpicker: any;\r\n  public cSelectorImg: string;\r\n  public cSelectorText: string;\r\n  public destName: string;\r\n  public customSelectorOpen: boolean;\r\n  public all: any;\r\n  public userLocal: any;\r\n  public form: any;\r\n  public nftnumber: number\r\n  public alertmessage: string;\r\n  base: any = [];\r\n  tag: any;\r\n  baseAdd: any = [];\r\n  files: any[] = [];\r\n  file: string;\r\n  payload: any;\r\n  totalimport: any;\r\n  type: string;\r\n  path: string;\r\n  sn: any;\r\n  regexp: string\r\n  filepick: boolean = false;\r\n  walletselected: boolean = false;\r\n  fileselected: boolean = false;\r\n  showLoader = false;\r\n  loadingMessage: string = '';\r\n  options: AnimationOptions = {\r\n    path: 'https://raida11.cloudcoin.global/animation/cloud_loading.json',\r\n  };\r\n  upload_url: any;\r\n  secret_key: any;\r\n  api_key: any;\r\n  dname: any;\r\n  nftSettingsForm: any;\r\n  dname_enable: boolean\r\n  constructor(private fb: FormBuilder,\r\n    private storage: EventService,\r\n    private api: ApiService,\r\n    private router: Router) {\r\n    this.cSelectorText = '';\r\n  }\r\n\r\n  async ngOnInit(): Promise<string> {\r\n    // this.regexp = \"^(?:[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]\\.)+[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]$\";\r\n    this.regexp = \"^(?:[a-zA-Z0-9\\-][a-zA-Z0-9\\-]{0,61})*([\\.]{1,1}[a-z]{2,})+$\";\r\n    this.nftForm = new FormGroup({\r\n      'title': new FormControl('', [Validators.required, Validators.pattern('[a-zA-z0-9-]*')]),\r\n      'dnsname': new FormControl('', Validators.pattern(this.regexp)),\r\n      'nftnumber': new FormControl(1, [Validators.required, Validators.min(1)]),\r\n      'format_one': new FormControl('false'),\r\n      'xcoordinates': new FormControl(10),\r\n      'ycoordinates': new FormControl(10),\r\n      'colorpicker': new FormControl('#000000',),\r\n      'transparency': new FormControl(1, [Validators.min(0), Validators.max(1)]),\r\n      'fontsize': new FormControl(16, [Validators.min(16), Validators.max(72)]),\r\n      'description': new FormControl(),\r\n      'personal_text': new FormControl()\r\n    });\r\n    this.userLocal = localStorage.getItem('userLocal');\r\n    this.getAllwallet();\r\n    this.textformat = false;\r\n    this.type = localStorage.getItem('wallet');\r\n    this.getConfDetails();\r\n    //console.log(\"this.dname:\" + dname)\r\n    let response: any = await this.api.returnNftConf();\r\n    if (response.status === \"success\") {\r\n      this.upload_url = response.payload.upload_url;\r\n      console.log(\"test\" + \" \" + this.upload_url)\r\n      if (this.upload_url != 'undefined') {\r\n        var splitted = this.upload_url.split(\"/\", 3)\r\n        console.log(\"splitted:\" + splitted[2])\r\n        this.dname = splitted[2]\r\n        this.dname_enable = true;\r\n      }\r\n      else {\r\n        //alert(\"undefined url\")\r\n        console.log(\"any thing\")\r\n        this.dname_enable = false;\r\n      }\r\n      this.nftForm.patchValue({\r\n        dnsname: this.dname\r\n      })\r\n    } else {\r\n      console.log('no previous configurations found');\r\n    }\r\n    console.log(this.dname)\r\n    //if(this.d)\r\n    return response\r\n  }\r\n\r\n\r\n  isValidInput(value: any) {\r\n    return this.nftForm.controls[value].invalid &&\r\n      (this.nftForm.controls[value].dirty || this.nftForm.controls[value].touched);\r\n  }\r\n\r\n  async onSubmit(form: FormGroup) {\r\n    console.log(this.nftForm)\r\n    this.exportNft()\r\n  }\r\n\r\n  async balancecheck() {\r\n    this.nftnumber = this.nftForm.get('nftnumber').value;\r\n    let response: any = await this.api.getTransaction(this.destName);\r\n    if (response.payload.balance < this.nftnumber) {\r\n      Swal.fire({\r\n        title: 'You cannot make this number of NFTs because selected wallet balance is ' + response.payload.balance + 'cc',\r\n        icon: 'info',\r\n        confirmButtonText: 'Okay'\r\n      })\r\n    }\r\n  }\r\n\r\n  async customSelector(val: string, type: string) {\r\n    this.destName = val;\r\n    this.cSelectorImg = 'assets/folder-w-border.svg';\r\n    this.cSelectorText = this.all[0].name;\r\n    this.customSelectorOpen = false;\r\n    console.log(\"val \" + this.destName)\r\n    this.cSelectorText = val\r\n    this.walletselected = true;\r\n    console.log(\"wallet selected:\" + this.walletselected)\r\n    let response: any = await this.api.getTransaction(this.destName);\r\n    if (response.payload.balance == 0) {\r\n      Swal.fire({\r\n        title: 'You cannot make NFTs because your wallet is empty.',\r\n        icon: 'info',\r\n        confirmButtonText: 'Okay'\r\n      });\r\n    }\r\n\r\n  }\r\n  customSelToggler(val: string) {\r\n    this.customSelectorOpen = !this.customSelectorOpen;\r\n  }\r\n\r\n  async getAllwallet() {\r\n    try {\r\n      let response: any;\r\n      response = await this.api.getWallet();\r\n      if (response.status == 'success') {\r\n        this.all = response.payload;\r\n        //console.log(this.all)\r\n        console.log(\"this.all\" + this.all)\r\n        this.cSelectorImg = 'assets/folder-w-border.svg';\r\n        // if (this.all.length == 1) {\r\n        this.cSelectorText = this.all[0].name;\r\n        this.customSelectorOpen = false;\r\n        this.walletselected = true;\r\n        this.destName = this.all[0].name\r\n        //}\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  formatradio(e) {\r\n    this.format = e.target.value;\r\n    console.log(\" radio button value:\" + this.format)\r\n    if (this.format == 'false') {\r\n      this.textformat = false;\r\n      console.log(\"textformat if:\" + this.textformat)\r\n    }\r\n    else if (this.format == 'true') {\r\n      this.textformat = true\r\n      console.log(this.textformat)\r\n    }\r\n  }\r\n\r\n  async getPath() {\r\n    try {\r\n      let response: any = await this.api.importFile();\r\n      if (response.status == \"success\") {\r\n        this.file = response.payload.items_picked[0];\r\n        var last = this.file.substring(this.file.lastIndexOf(\".\") + 1, this.file.length);\r\n        if (last == 'bin' || last == 'stack') {\r\n          Swal.fire({\r\n            title: 'Please select an image with png format',\r\n            icon: 'info',\r\n            confirmButtonText: 'Okay'\r\n          })\r\n          this.file = '';\r\n        }\r\n        this.filepick = true;\r\n      }\r\n      else {\r\n        this.filepick = false;\r\n        Swal.fire({\r\n          title: 'Dialog Canceled',\r\n          icon: 'info',\r\n          confirmButtonText: 'Okay'\r\n        })\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  // async importNFT() {\r\n\r\n  //   try {\r\n\r\n  //     for (let i = 0; i < this.files?.length; i++) {\r\n  //       this.base.push({ 'type': 'file', 'data': this.files[i] })\r\n  //     }\r\n  //     var data = {\r\n  //       name: this.destName,\r\n  //       tag: this.tag,\r\n  //       items: this.base\r\n  //     }\r\n  //     let response: any = await this.api.import(data);\r\n  //     if (response.status === \"success\") {\r\n  //       console.log('hi');\r\n  //       this.doCheck(response.payload?.id, (data: any) => {\r\n\r\n  //       });\r\n  //     } else {\r\n\r\n  //       Swal.fire({\r\n  //         title: response.payload.message,\r\n  //         icon: 'error',\r\n  //         confirmButtonText: 'Okay',\r\n  //       }).then((result) => {\r\n  //         if (result.value) { { } }\r\n  //       });\r\n  //     }\r\n  //   }\r\n\r\n  //   catch (e) {\r\n  //     console.log(e);\r\n\r\n  //   }\r\n  // }\r\n\r\n  // async doCheck(taskID: any, xdata: any) {\r\n  //   let task: any = await this.api.doCheck(taskID);\r\n\r\n\r\n  //   if (task) {\r\n  //     this.payload = task.payload;\r\n  //     this.totalimport = this.payload.data?.pown_results?.total;\r\n\r\n  //     if (this.payload.status == \"error\" || this.payload.status == \"completed\") {\r\n  //       if (this.payload.status == \"completed\") {\r\n\r\n  //         this.storage.setItem(\"wallet\", \"localwallet\", 'upload');\r\n\r\n  //       }\r\n  //       return;\r\n  //     }\r\n  //     setTimeout(() => {\r\n  //       this.doCheck(taskID, xdata)\r\n  //     }, 500)\r\n\r\n  //   }\r\n  // }\r\n\r\n  async exportNft() {\r\n    try {\r\n      var data = {\r\n        name: this.destName,\r\n        amount: Number(this.nftForm.get('nftnumber').value),\r\n        template_path: this.file,\r\n        // text_color: String(this.nftForm.get('colorpicker').value),\r\n        // domain_name: String(this.nftForm.get('dnsname').value),\r\n        // text: String(this.nftForm.get('personal_text').value),\r\n        // x: Number(this.nftForm.get('xcoordinates').value),\r\n        // y: Number(this.nftForm.get('ycoordinates').value),\r\n        // is_vertical: true,\r\n        // font_size: Number(this.nftForm.get('fontsize').value),\r\n        text_color: \"#000000\",\r\n        domain_name: String(this.nftForm.get('dnsname').value),\r\n        text: \"\",\r\n        x: 10,\r\n        y: 10,\r\n        is_vertical: true,\r\n        font_size: 16,\r\n        host_name: String(this.nftForm.get('title').value),\r\n        description: String(this.nftForm.get('description').value),\r\n        is_transparent: true,\r\n        write_sn: false\r\n      }\r\n      let response: any = await this.api.exportCoinasNft(data);\r\n      console.log(data);\r\n      this.showLoader = true;\r\n      this.loadingMessage = \"Creating NFT...\"\r\n      if (response.status === \"success\") {\r\n        this.doCheck1(response.payload?.id, (data: any) => {\r\n        });\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  async doCheck1(taskID: any, xdata: any) {\r\n    let task: any = await this.api.doCheck(taskID);\r\n    if (task) {\r\n      this.payload = task.payload;\r\n      if (this.payload.status == \"error\" || this.payload.status == \"completed\") {\r\n        if (this.payload.status == \"completed\") {\r\n          console.log(\"process completed\")\r\n          this.showLoader = false;\r\n          Swal.fire({\r\n            title: 'NFT has been created successfully',\r\n            icon: 'success',\r\n            confirmButtonText: 'Okay'\r\n          })\r\n          this.router.navigate(['/dashboard/create-nft-gallery']);\r\n        } else {\r\n          this.showLoader = false;\r\n          Swal.fire({\r\n            title: 'Failed to create NFT',\r\n            icon: 'error',\r\n            confirmButtonText: 'Okay'\r\n          })\r\n          this.router.navigate(['/dashboard/create-nft']);\r\n          window.location.reload();\r\n        }\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        this.doCheck1(taskID, xdata)\r\n      }, 500)\r\n    }\r\n  }\r\n\r\n  showLoading(state): void {\r\n    this.loadingMessage = '';\r\n    if (state) {\r\n\r\n      this.showLoader = true;\r\n\r\n    } else {\r\n\r\n      this.showLoader = false;\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  animationCreated(animationItem: AnimationItem): void {\r\n    console.log(animationItem);\r\n  }\r\n  async getConfDetails(): Promise<string> {\r\n    console.log('yayyyyy')\r\n    try {\r\n      let response: any = await this.api.returnNftConf();\r\n      if (response.status === \"success\") {\r\n        this.upload_url = response.payload.upload_url;\r\n        // this.secret_key = response.payload.upload_secret_key;\r\n        // this.api_key = response.payload.cf_api_key;\r\n        //console.log(\"test\" + \" \" + this.secret_key)\r\n        var splitted = this.upload_url.split(\"/\", 3)\r\n        console.log(\"splitted:\" + splitted[2])\r\n        this.dname = splitted[2]\r\n      } else {\r\n        console.log('no previous configurations found');\r\n      }\r\n      // this.nftForm.patchValue({\r\n      // secretkey: this.secret_key,\r\n      // apikey: this.api_key,\r\n      // url: this.upload_url,\r\n      //   dnsname: this.dname\r\n\r\n      // })\r\n      return this.dname;\r\n    }\r\n\r\n    catch (e) {\r\n      console.log(e);\r\n\r\n    }\r\n\r\n  }\r\n\r\n}","<div class=\"transWrapper\">\r\n    <div class=\"headerbackWrap\">\r\n        <span class=\"titleOne\">CREATE NFT</span>\r\n    </div>\r\n    <form [formGroup]=\"nftForm\" (ngSubmit)=\"onSubmit(nftForm)\">\r\n        <div class=\"transBody\">\r\n            <div class=\"gap10\"></div>\r\n            <p class=\"titleTwo\" style=\"opacity: 0.8;\">Here you can turn your CloudCoins into NFTs by embedding\r\n                CloudCoins\r\n                into PNG images. You can always turn your NFTs back into CloudCoins.</p>\r\n            <div class=\"gap10\"></div>\r\n            <!-- <p class=\"titleTwo\" style=\"opacity: 0.8;\">\"If you would like to publish your NFTs so that they can be verified as authentic,\r\n                please go to settings and configure your web server and your DNS domain.\"\r\n            </p> -->\r\n            <div *ngIf=\"!dname_enable\">\r\n                <p class=\"titleTwo\">If you would like to publish your NFTs so that they can be verified as authentic, please go to \"Settings\" and configure your web server and your DNS domain.</p>\r\n            </div>\r\n            <div class=\"gap20\"></div>\r\n            <div class=\"gap10\"></div>\r\n            <!-- <p class=\"titleTwo\" style=\"opacity: 0.8;\">Optionally If you own a domain name, You can create records in\r\n                your\r\n                DNS Server that prove that you are the creator of the NFT and customize each NFT.</p> -->\r\n            <!-- <h2>Step 1:Creating the NFTs</h2>\r\n            <p class=\"titleTwo\" style=\"opacity: 0.8;\">First you will create the NFTs from PNGs that you have. Then If\r\n                you\r\n                like, you can register your NFTs with your DNS server so that users can verify that they are </p> -->\r\n            <ng-container>\r\n                <div class=\"formField\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-5\">\r\n                            <label for=\"username\">PNG file to be used:</label>\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <div class=\"filepicker\">\r\n                                <span>{{file}}</span>\r\n                                <div class=\"icon_wrap\" (click)=\"getPath()\">\r\n                                    <img src=\"assets/folder_icon.svg\" alt=\"\" class=\"folderIcon\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"gap10\"></div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-5\">\r\n                        <label class=\"dark_mode_text\" for=\"title\">Title of the NFT (Must be fewer than 61\r\n                            characters)</label>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                        <input class=\" form-control text_box_two\" type=\"text\" formControlName=\"title\" maxlength=\"61\"\r\n                            name=\"title\" id=\"title\" (keydown.enter)=\"$event.preventDefault()\">\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"isValidInput('title')\">\r\n                    <span class=\"errorMsg1\" *ngIf=\"nftForm.controls['title'].errors?.required\"><img\r\n                            src=\"assets/error_info_icon.svg\" alt=\"error icon\">Title is required.</span>\r\n                    <span class=\"errorMsg1\"><img src=\"assets/error_info_icon.svg\" alt=\"error icon\"> Only numbers,\r\n                        letters and hyphens are permitted.</span>\r\n                </div>\r\n                <div class=\"gap10\"></div>\r\n                <div *ngIf=\"dname_enable\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-5\">\r\n                            <label class=\"dark_mode_text\" for=\"qualname\">Verification Domain Name (optional):\r\n                                <span class=\"ml-1\">\r\n                                    <img src=\"assets/icons_info1.png\"\r\n                                        title=\"You can create records in your DNS Server that prove that you are the creator of the NFT and customize each NFT.\"\r\n                                        style=\"height: 18px ; width:18px\" />\r\n                                </span>\r\n                            </label>\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <input class=\"form-control text_box_two\" type=\"text\" formControlName=\"dnsname\"\r\n                                maxlength=\"61\" (keydown.enter)=\"$event.preventDefault()\">\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf=\"isValidInput('dnsname')\">\r\n                        <span class=\"errorMsg1\"><img src=\"assets/error_info_icon.svg\" alt=\"error icon\">Please enter\r\n                            domain\r\n                            name in valid format. Max length is 61.</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"gap20\"></div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-5\">\r\n                        <label class=\"dark_mode_text\" for=\"IncludeOtherText\">Wallet to get Coins from:</label>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                        <div class=\"lineSection\">\r\n                            <div class=\"customeDropdownTwo\">\r\n                                <div class=\"triger\" (click)=\"customSelToggler('local')\">\r\n                                    <!-- <img [src]=\"cSelectorImg\" height=\"20\" alt=\"\">-->\r\n                                    <span>{{cSelectorText}}</span>\r\n                                </div>\r\n                                <div class=\"menuShowTwo scroll\" *ngIf=\"customSelectorOpen\">\r\n                                    <div class=\"menus\" *ngFor=\"let data of all; let i = index;\"\r\n                                        (click)=\"customSelector(data.name, 'local')\">\r\n                                        <img src=\"assets/folder-w-border.svg\" height=\"18\" alt=\"icon\">\r\n                                        <span>{{data.name}}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <!-- </div> -->\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"gap10\"></div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-5\">\r\n                        <label class=\"dark_mode_text\" for=\"nftnumber\">Number of NFTs to create:</label>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                        <input class=\"form-control text_box_two\" type=\"number\" formControlName=\"nftnumber\"\r\n                            id=\"nftnumber\" value=\"1\" (change)=\"balancecheck()\" name=\"nftnumber\">\r\n                    </div>\r\n                </div>\r\n                <span class=\"errorMsg1\"\r\n                    *ngIf=\"!nftForm.get('nftnumber').valid && nftForm.get('nftnumber').touched \">Enter\r\n                    valid data.</span>\r\n                <div class=\"gap20\"></div>\r\n                <div class=\"formField\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-md-5\">\r\n                            <label class=\"dark_mode_text\" for=\"Description\">Description:</label>\r\n                        </div>\r\n                        <div class=\"col-md-2\">\r\n                            <textarea name=\"description\" class=\"form-control text_box_two\"\r\n                                style=\"width:300px; height:100px;\" formControlName=\"description\"\r\n                                id=\"description\"></textarea>\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf=\"isValidInput('description')\">\r\n                        <span class=\"errorMsg1\" *ngIf=\"nftForm.controls['description'].errors?.required\"><img\r\n                                src=\"assets/error_info_icon.svg\" alt=\"error icon\">Description is reqiured.</span>\r\n                        <span class=\"errorMsg1\"><img src=\"assets/error_info_icon.svg\" alt=\"error icon\"> Only numbers\r\n                            and\r\n                            letters are permitted.</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"gap10\"></div>\r\n                <div class=\"gap20\"></div>\r\n                <p class=\"titleTwo\" style=\"opacity: 0.8;\">NOTE: You may recyle your NFT anytime, so don't worry about making\r\n                    a\r\n                    mistake. You can simply redo it.</p>\r\n                <!-- <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                <label class=\"dark_mode_text\" for=\"text\">Add Text To Image (Optional)</label>\r\n                </div>\r\n                <div class=\"col-md-2\">\r\n                <input class=\"form-control text_box_two\" type=\"text\" formControlName=\"personal_text\" (keydown.enter)=\"$event.preventDefault()\">\r\n                </div>\r\n                </div> -->\r\n                <!-- <div *ngIf=\"isValidInput('personal_text')\">\r\n                    <span class=\"errorMsg1\" *ngIf=\"nftForm.controls['personal_text'].errors?.required\"><img\r\n                            src=\"assets/error_info_icon.svg\" alt=\"error icon\">Description is reqiured.</span>\r\n                    <span class=\"errorMsg1\"><img src=\"assets/error_info_icon.svg\" alt=\"error icon\"> Only Numbers and\r\n                        letters are allowed</span>\r\n                </div>\r\n                <div class=\"gap10\"></div>\r\n                <div class=\"row\">\r\n                    <div class=\"col-md-4\">\r\n                        <div class=\"formField\">\r\n                            <label>Write Serial Numbers on NFTs?</label>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                        <input type=\"radio\" name=\"format_one\" formControlName=\"format_one\" value=\"false\" id=\"format_one\"\r\n                            (change)=\"formatradio($event)\"><span class=\"btn_text\">No</span>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                        <input type=\"radio\" name=\"format_one\" formControlName=\"format_one\" value=\"true\" id=\"format_one\"\r\n                            (change)=\"formatradio($event)\"><span class=\"btn_text\">Yes</span>\r\n                    </div>\r\n                </div>\r\n                <div *ngIf=\"textformat\">\r\n                    <div class=\"gap10\"></div>\r\n                    <div class=\"row\">\r\n                    <div class=\"col-md-4\">\r\n                    <label class=\"dark_mode_text\" for=\"color\">X location of upper left corner of Serial Number:</label>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                    <input class=\"form-control text_box_two\" type=\"number\" formControlName=\"xcoordinates\" value=\"10\">\r\n                    </div>\r\n                    </div>\r\n                    <div class=\"gap10\"></div>\r\n                    <div class=\"row\">\r\n                    <div class=\"col-md-4\">\r\n                    <label class=\"dark_mode_text\" for=\"fontsize\">Y location of upper left corner of Serial\r\n                        Number:</label>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                    <input class=\"form-control text_box_two\" type=\"number\" formControlName=\"ycoordinates\" value=\"10\">\r\n                    </div>\r\n                    </div>\r\n                    <div class=\"gap10\"></div>\r\n                    <div class=\"row\">\r\n                    <div class=\"col-md-4\">\r\n                    <label class=\" colorpicker dark_mode_text\" for=\"color\">Color of the Serial Number:</label>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                    <input class=\"form-control text_box_two\" type=\"color\" name=\"colorpicker\" formControlName=\"colorpicker\"\r\n                        id=\"colorpicker\">\r\n                    </div>\r\n                    </div> -->\r\n                <!-- <div class=\"gap10\"></div>\r\n                    <div class=\"row\">\r\n                    <div class=\"col-md-4\">\r\n                    <label class=\"dark_mode_text\" for=\"transparency\">Text Transparency: </label>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                    <input class=\"form-control text_box_two\" type=\"text\" name=\"transparency\" id=\"transparency\"\r\n                        formControlName=\"transparency\" value=\"1\" onkeypress=\"return /[0-9.]/i.test(event.key)\">\r\n                    </div>\r\n                    </div>\r\n                    <span class=\"errorMsg1\"\r\n                        *ngIf=\"!nftForm.get('transparency').valid && nftForm.get('transparency').touched \">Enter\r\n                        valid data(0-1)</span> -->\r\n                <!-- <div class=\"gap10\"></div>\r\n                    <div class=\"row\">\r\n                    <div class=\"col-md-4\">\r\n                    <label class=\"dark_mode_text\" for=\"fontsize\">Font size:</label>\r\n                    </div>\r\n                    <div class=\"col-md-2\">\r\n                    <input type=\"number\" class=\"form-control text_box_two\" name=\"fontsize\" formControlName=\"fontsize\"\r\n                        value=\"16\">\r\n                    </div>\r\n                    </div>\r\n                    <span class=\"errorMsg1\"\r\n                        *ngIf=\"!nftForm.get('fontsize').valid && nftForm.get('fontsize').touched \">Enter\r\n                        valid data(16-72)</span>\r\n                </div> -->\r\n            </ng-container>\r\n            <div class=\"transBottomFooter\">\r\n                <div class=\"bottomPartSubmit\">\r\n                    <div class=\"bottomFooter\">\r\n                        <div class=\"container\">\r\n                            <button href=\"javascript:;\" class=\"btnCustomBlue btnLarge\"\r\n                                [ngClass]=\"{btnDisable: this.nftForm.invalid || this.filepick == false || this.walletselected == false }\"\r\n                                type=\"submit\">Create\r\n                                NFT</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </form>\r\n</div>\r\n\r\n<div class=\"onEventLoadWrap\" *ngIf=\"showLoader\">\r\n    <ng-container>\r\n        <div class=\"text-center  loader_show\">\r\n            <ng-lottie height=\"150px\" [options]=\"options\" (animationCreated)=\"animationCreated($event)\"></ng-lottie>\r\n            <span style=\"color:#ffffff\">{{loadingMessage}}</span>\r\n        </div>\r\n    </ng-container>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CreateNftWalletComponent } from './create-nft-wallet.component';\r\nimport { CommonModule } from '@angular/common';\r\n//import { BrowserModule } from '@angular/platform-browser'\r\nconst routes: Routes = [\r\n  { path: '', component: CreateNftWalletComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes), CommonModule,\r\n    // BrowserModule\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class CreateNftWalletRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CreateNftWalletRoutingModule } from './create-nft-wallet-routing.module'\r\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { LottieModule } from 'ngx-lottie';\r\nimport { CreateNftWalletComponent } from './create-nft-wallet.component';\r\n@NgModule({\r\n  declarations: [CreateNftWalletComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CreateNftWalletRoutingModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n  ]\r\n})\r\nexport class CreateNftWalletModule { }\r\n"],"sourceRoot":"webpack:///"}