{"version":3,"sources":["./src/app/dashboard/functions/nft-health/nft-health.component.ts","./src/app/dashboard/functions/nft-health/nft-health.component.html","./src/app/dashboard/functions/nft-health/nft-health-routing.module.ts","./src/app/dashboard/functions/nft-health/nft-health.module.ts"],"names":[],"mappings":"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","file":"nft-health-nft-health-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ApiService } from 'src/app/services/api.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-nft-health',\r\n  templateUrl: './nft-health.component.html',\r\n  styleUrls: ['./nft-health.component.scss']\r\n})\r\nexport class NftHealthComponent implements OnInit {\r\n  payload: any;\r\n  healthProg: any;\r\n  goTODash: boolean;\r\n  afterClick: boolean;\r\n  afterClick1: boolean\r\n  goTODash1: boolean;\r\n\r\n  constructor(public router: Router, private api: ApiService) {\r\n\r\n  }\r\n  ngOnInit() {\r\n    this.checkhealthNFT()\r\n  }\r\n\r\n  async checkhealthNFT() {\r\n    try {\r\n      var data = {\r\n        name: \"NFTs\"\r\n      }\r\n      let response: any = await this.api.health(data);\r\n      if (response.status == \"success\") {\r\n        this.doCheckHealthNFT(response.payload?.id, (data: any) => { })\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  async doCheckHealthNFT(taskID: any, xdata: any) {\r\n    let task: any = await this.api.doCheck(taskID);\r\n    console.log(\"Task done: \", task);\r\n    if (task) {\r\n      this.payload = task.payload;\r\n      this.healthProg = this.payload;\r\n      if (this.payload.status == \"error\" || this.payload.status == \"completed\") {\r\n        if (this.payload.status == \"completed\") {\r\n          // this.fixFracked();\r\n          this.goTODash = true;\r\n        }\r\n        else {\r\n          // this.goTODash = true;\r\n          if (this.payload?.data?.message == \"No coins to detect\") {\r\n            // Swal.fire({\r\n            //   title: \"Fracked coins found. Use the Fix Fracked tool to fix them.\",\r\n            //   icon: 'info',\r\n            //   confirmButtonText: 'Okay',\r\n            // }).then((result) => {\r\n            //   if (result.value) {\r\n            //     {\r\n            //       this.router.navigate(['/dashboard/home'])\r\n            //     }\r\n            //   }\r\n            // });\r\n            console.log('hehe')\r\n\r\n            //  this.goTODash = true;\r\n          } else {\r\n            Swal.fire({\r\n              title: this.payload.data.message,\r\n              icon: 'error',\r\n              confirmButtonText: 'Okay',\r\n            }).then((result) => {\r\n              if (result.value) {\r\n                {\r\n                  this.router.navigate(['/dashboard/home'])\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        this.doCheckHealthNFT(taskID, xdata)\r\n      }, 500)\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n}","<div class=\"transWrapper\">\r\n    <div class=\"headerbackWrap\">\r\n        <a href=\"javascript:;\" routerLink=\"/dashboard/home\" class=\"backBtnInHeader\"><img src=\"assets/arrow.svg\"\r\n                alt=\"\"></a>\r\n        <span class=\"titleOne\">Health Check</span>\r\n    </div>\r\n    <div class=\"gap20\"></div>\r\n    <div class=\"transBody\">\r\n        <p class=\"subTitleTwo\">This process verifies the authenticity of your coins. If a coin is found to be fractured\r\n            or counterfeit, it will be placed in the appropriate folder.</p>\r\n        <div class=\"headthSubHed\">\r\n            <h4>Performing Health check for the wallet: <span>NFTs</span></h4>\r\n        </div>\r\n        <div class=\"lineSection\">\r\n            <div class=\"progressWrap\" *ngIf=\"!goTODash\">\r\n                <div class=\"progress\">\r\n                    <div class=\"progress-bar progress-bar-striped\" role=\"progressbar\"\r\n                        style=\"background-color: green!important;\"\r\n                        [ngStyle]=\"{'width': healthProg?.progress < 15 ? 15 + healthProg?.progress + '%' :  healthProg?.progress + '%'}\"\r\n                        aria-valuenow=\"55\" aria-valuemin=\"0\" aria-valuemax=\"100\">Checking\r\n                        coins...\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"formField\" *ngIf=\"healthProg?.progress === '100'\">\r\n                <div class=\"checkboxInpHolder\">\r\n                    <img src=\"assets/green-check.svg\" alt=\"icon\"> <span style=\"color: #2a4;\"> Health check\r\n                        completed</span>\r\n                </div>\r\n            </div>\r\n            <div class=\"gap10\"></div>\r\n            <div class=\"healthList\" *ngIf=\"goTODash && healthProg?.status === 'completed'\">\r\n                <div class=\"healthListDiv\">\r\n                    <p>Total Coins found to be perfectly authentic:</p>\r\n                    <h6>{{this.healthProg?.data?.TotalAuthentic}}</h6>\r\n                </div>\r\n                <div class=\"healthListDiv\">\r\n                    <p>Total Coins found to be authentic but fractured:</p>\r\n                    <h6>{{this.healthProg?.data?.TotalFracked + this.healthProg?.data?.TotalAlreadyFracked}}</h6>\r\n                </div>\r\n                <div class=\"healthListDiv\">\r\n                    <p>Total Coins found to be counterfeit:</p>\r\n                    <h6>{{this.healthProg?.data?.TotalCounterfeit}}</h6>\r\n                </div>\r\n                <!-- <div class=\"healthListDiv\">\r\n                    <p>Total Coins that are already fracked:</p>\r\n                    <h6>{{this.healthProg?.data?.TotalAlreadyFracked}}</h6>\r\n                </div> -->\r\n                <div class=\"healthListDiv\">\r\n                    <p>Total Errors</p>\r\n                    <h6>{{this.healthProg?.data?.TotalErrors}}</h6>\r\n                </div>\r\n                <div class=\"healthListDiv\">\r\n                    <p>Total Coins</p>\r\n                    <h6>{{this.healthProg?.data?.TotalCoins}}</h6>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"transBottomFooter\">\r\n        <button class=\"btnCustomBlue\" [ngClass]=\"{'btnDisable': goTODash === false}\"\r\n            (click)=\"goTODash ? router.navigate(['/dashboard//create-nft-gallery']) : ''\">close</button>\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { NftHealthComponent } from './nft-health.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component : NftHealthComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class NftHealthRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { NftHealthRoutingModule } from './nft-health-routing.module';\r\nimport { NftHealthComponent } from './nft-health.component';\r\nimport { LottieModule } from 'ngx-lottie';\r\n\r\n@NgModule({\r\n  declarations: [NftHealthComponent],\r\n  imports: [\r\n    CommonModule,\r\n    NftHealthRoutingModule,\r\n    LottieModule\r\n  ]\r\n})\r\nexport class NftHealthModule { }"],"sourceRoot":"webpack:///"}